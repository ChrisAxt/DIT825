# Select the k8s api group to create resources
apiVersion: apps/v1
# define deployment as the kind of resource we want to create.
# a deployment wraps our containers into pods + manages updates to pods.
kind: Deployment
# set meta-data for the deployment.
metadata:
  # set name to uniquely identify object in within its namespace (default name space in this case)
  name: news-bias-evaluator-app
# Specification of the desired behavour of the deployment
spec:
  # let's us define which pods (based on pod labels) should be affected by this deployment.
  # in other words, it defines which pods the deployment should be applied to.
  selector:
    matchLabels:
      app: news-bias-evaluator-app
  # set the number of replicas of the same pod that
  # should exist.
  replicas: 2
  # set meta-data for the replica-set
  template:
    metadata:
      # set key and value pair used for identifying the pod.
      # The load balancer uses this label to route traffic to these pods
      labels:
        app: news-bias-evaluator-app
    spec:
      # registry credentials were deployed manually to the cluster.
      # Keys contain base 64 encoding for security reasons.
      # The following two lines tell the deployment file to use these credentials
      # to pull the docker image from the private registry
      imagePullSecrets:
        - name: registry-credentials
      containers:
        # Important note! args lets us define commands to run within
        # the docker container. If we do not start the django app,
        # the container will exit as there is nothing running.
        # docker compose build will build separate images for each
        # service defined inside docker-compose.yml. Commands that we
        # specify within the docker-compose.yml ARE NOT run within pods.
        - args:
            - python
            - manage.py
            - runserver
            - 0.0.0.0:8000
          # specify the name of the container
          # note: containers within the same pod must have unique names
          name: news-bias-evaluator-app
          # define the image to pull
          #image: registry.git.chalmers.se/courses/dit825/2022/group07/group-07:latest
          image: marble879/dockerhub:second-image
          # Limits the resourced dedicated to the container.
          resources:
            limits:
              memory: "1Gi"
              cpu: "500m"
          env:
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: cloudsql
                  key: database
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: cloudsql
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cloudsql
                  key: password
          # list the ports to expose from the container
          ports:
            # set the port to expose on the pod's ip address
            - containerPort: 8000

        - image: gcr.io/cloudsql-docker/gce-proxy:1.16
          name: cloudsql-proxy
          command:
            [
              "/cloud_sql_proxy",
              "--dir=/cloudsql",
              "-instances=dit825:europe-north1:dit825-cloudsql=tcp:5432",
              "-credential_file=/secrets/cloudsql/credentials.json",
            ]
          volumeMounts:
            - name: cloudsql-oauth-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
            - name: cloudsql
              mountPath: /cloudsql
          resources:
            limits:
              memory: "1Gi"
              cpu: "500m"
            requests:
              memory: "1Gi"
              cpu: "2"
      volumes:
        - name: cloudsql-oauth-credentials
          secret:
            secretName: cloudsql-oauth-credentials
        - name: cloudsql
          emptyDir: {}

---
# define service as the kind of resource we want to create.
# a service exposes an application running on pods as a network service.
apiVersion: v1
kind: Service
# set meta-data for the deployment.
metadata:
  # set name to uniquely identify object in within its namespace (default name space in this case)
  name: news-bias-evaluator-app
  # Add a key-value pair (app and its value) as identifiers for future use.
  # As this load balancer is specific to load balancing the django app, this identification
  # provides clarity on its purpose.
  labels:
    app: news-bias-evaluator-app
# specification of the desired behavour of the service.
spec:
  # set the service to be exposed via a loadbalancer
  # by setting Load balancer, we use the provided load balancer from GKE - allowing our application
  # to be accessible from outside of the cluster (ie the webpaeg can be accessed publicly)
  type: LoadBalancer
  # Set a static IP for the load balancer, so it stays consistent when updated.
  loadBalancerIP: 34.88.187.253
  # List the ports that are exposed by this service.
  ports:
    # The port that will be exposed by the load balancer.
    - port: 3000
      # set the number of the port to access on the pods targeted by the service
      # in other words, forward traffic to the target port inside the news-bias-evaluator-app pod
      targetPort: 8000
  selector:
    # Route service traffic to pods with label key and value pairs
    app: news-bias-evaluator-app
